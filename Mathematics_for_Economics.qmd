---
title: "Mathematics for Economics"
author: "Lajos Galambos"
format: html
---
This is file contains the R code for the "Mathematics for Economics" preparation. I recreate plots, figure, diagrams for the sake of practicing. 

```{r}
##################### Figure 1 #####################
##################### Inequalities #####################  
# Load required package
library(ggplot2)

# Create a data frame for each expression
df1 <- data.frame(expression = "(x - 1)", x_start = -5, x_end = 1, y = 3, color = "Negative")
df2 <- data.frame(expression = "(x - 1)", x_start = 1, x_end = 5, y = 3, color = "Positive")
df3 <- data.frame(expression = "(3 - x)", x_start = -5, x_end = 3, y = 2, color = "Positive")
df4 <- data.frame(expression = "(3 - x)", x_start = 3, x_end = 5, y = 2, color = "Negative")
df5 <- data.frame(expression = "(x - 1)(3 - x)", x_start = -5, x_end = 1, y = 1, color = "Negative")
df6 <- data.frame(expression = "(x - 1)(3 - x)", x_start = 1, x_end = 3, y = 1, color = "Positive")
df7 <- data.frame(expression = "(x - 1)(3 - x)", x_start = 3, x_end = 5, y = 1, color = "Negative")

# Combine the data frames
df <- rbind(df1, df2, df3, df4, df5, df6, df7)

# Create a ggplot object
p1 <- ggplot(df, aes(x_start, y, xend = x_end, yend = y, color = color)) +
  geom_segment(size = 2) +
  geom_vline(xintercept = c(1, 3), linetype = "dashed") +
  scale_color_manual(values = c("Positive" = "green", "Negative" = "red")) +
  scale_y_continuous(breaks = c(1, 2, 3), labels = c("(x - 1)(3 - x)", "(3 - x)", "(x - 1)")) +
  scale_x_continuous(breaks = seq(-5, 5, by = 1)) +
  labs(color = "") +
  ggtitle(expression(paste("(x - 1)(3 - x) > 0"))) +
  theme_minimal() +
  theme(panel.grid.major = element_blank(), 
        panel.grid.minor = element_blank(), 
        panel.background = element_rect(fill = "white", colour = "black", size = 1, linetype = "solid"),
        axis.title = element_blank(),
        plot.title = element_text(hjust = 0.5))

# Print the plot
print(p1)

# Save the plot as a PNG image
ggsave("Sign_Diagram.png", plot = p1, width = 6, height = 4, dpi = 300)
```

```{r}
##################### Table 1 #####################
##################### Interval Notation #####################
# Load required packages
library(tibble)
library(knitr)

# Create a data frame
df <- tibble(
  Notation = c("(a, b)", "[a, b]", "(a, b]", "[a, b)"),
  Name = c("The open interval from a to b.",
           "The closed interval from a to b.",
           "A half-open interval from a to b.",
           "A half-open interval from a to b."),
  `The interval consists of all x satisfying:` = c("$a < x < b$", "$a \\leq x \\leq b$", "$a < x \\leq b$", "$a \\leq x < b$")
)

# Create a LaTeX table
table <- kable(df, "latex", escape = FALSE)

# Save the LaTeX table to a file
writeLines(table, "Notation.tex")
```



```{r}
##################### Figure 2 #####################
##################### Absolute Value #####################

# Create a data frame for each expression
df1 <- data.frame(expression = "7 to 2", x_start = 2, x_end = 7, y = 2, color = "Positive")
df2 <- data.frame(expression = "-2 to -7", x_start = -7, x_end = -2, y = 1, color = "Negative")

# Combine the data frames
df <- rbind(df1, df2)

# Create a ggplot object
p1 <- ggplot(df, aes(x_start, y, xend = x_end, yend = y, color = color)) +
  geom_segment(size = 2) +
  geom_vline(xintercept = c(2, 7, -2, -7), linetype = "dashed") +
  scale_color_manual(values = c("Positive" = "green", "Negative" = "red")) +
  scale_y_continuous(breaks = c(1, 2), labels = c("-2 to -7", "7 to 2")) +
  scale_x_continuous(breaks = seq(-8, 8, by = 1)) +
  labs(color = "") +
  ggtitle(expression(paste("|", "x"[1], " - ", "x"[2], "| = |", "x"[2], " - ", "x"[1], "|"))) +
  theme_minimal() +
  theme(panel.grid.major = element_blank(), 
        panel.grid.minor = element_blank(), 
        panel.background = element_rect(fill = "white", colour = "black", size = 1, linetype = "solid"),
        axis.title = element_blank(),
        plot.title = element_text(hjust = 0.5))

# Print the plot
print(p1)

# Save the plot as a PNG image
ggsave("Distance_Diagram.png", plot = p1, width = 6, height = 4, dpi = 300)
```

```{r}
##################### Figure 3 #####################
##################### Profit Equation #####################
# Define the cost, revenue, and profit functions
cost <- function(x) 20*x + 2000
revenue <- function(x) 75*x
profit <- function(x) revenue(x) - cost(x)

# Create a data frame of quantities
df <- data.frame(Quantity = 1:400)

# Calculate the cost, revenue, and profit for each quantity
df$Cost <- cost(df$Quantity)
df$Revenue <- revenue(df$Quantity)
df$Profit <- profit(df$Quantity)

# Create a ggplot object
p1 <- ggplot(df, aes(Quantity)) +
  geom_line(aes(y = Cost, color = "Cost"), size = 1) +
  geom_line(aes(y = Revenue, color = "Revenue"), size = 1) +
  geom_line(aes(y = Profit, color = "Profit"), size = 1) +
  geom_vline(xintercept = 300, linetype = "dashed", color = "black") +
  geom_hline(yintercept = 14500, linetype = "dashed", color = "black") +
  scale_color_manual(values = c("Cost" = "red", "Revenue" = "green", "Profit" = "blue")) +
  labs(x = "Quantity", y = "Dollars",
       title = "Break-Even Analysis",
       subtitle = "Profit Target = $14,500",
       color = "Legend") +
  scale_y_continuous(labels = scales::dollar) +
  theme_minimal() +
  theme(panel.grid.major = element_blank(), 
        panel.grid.minor = element_blank(), 
        panel.background = element_rect(fill = "white", colour = "black", size = 1, linetype = "solid"),
        axis.title = element_text(size = 12),
        plot.title = element_text(hjust = 0.5, size = 14),
        legend.position = "bottom")

# Print the plot
print(p1)

ggsave("Profit_Break_Even.png", plot = p1, width = 6, height = 4, dpi = 300)

```

```{r}
##################### Figure 4 #####################
##################### Non Linear Equations #####################
# Load necessary libraries
library(knitr)
library(kableExtra)

# Create a data frame with the cases
df <- data.frame(
  Case = c("Case 1", "Case 2"),
  Condition = c("y = 1", "Î» = -1/2xy^2")
)

# Create a LaTeX table
table <- df %>%
  kable("latex", booktabs = TRUE, caption = "Cases where the equation is zero") %>%
  kable_styling(latex_options = "hold_position")

# Save the table to a .tex file
sink("table.tex")
cat(table)
sink()
```



```{r}
##################### Figure 5 #####################
##################### Price Index #####################
# Install necessary packages
#install.packages(c("quantmod"))

# Load necessary packages
library(quantmod)

# Fetch the CPIAUCSL data from FRED
getSymbols("CPIAUCSL", src = "FRED")

# Convert the data to a data frame
data <- data.frame(CPIAUCSL)

# Create a new column for the date
data$Date <- as.Date(row.names(data))

# Plot the data
p1 <- ggplot(data, aes(x = Date, y = CPIAUCSL)) +
  geom_line(color = "blue") +
  labs(x = "Date", y = "CPIAUCSL", title = "Consumer Price Index (1982-1984=100)") +
  theme_minimal() +
  theme(panel.grid.major = element_line(color = "grey", linetype = "dashed"), 
        panel.grid.minor = element_blank(), 
        panel.background = element_rect(colour = "black", size = 1, linetype = "solid"),
        axis.title = element_text(size = 12),
        plot.title = element_text(hjust = 0.5, size = 14),
        legend.position = "bottom")   

# Print the plot
print(p1)

ggsave("Price_Index.png", plot = p1, width = 6, height = 4, dpi = 300)

```



